@model PageTelaResponse

@{
    ViewData["Title"] = "Catálogo de Telas";
    const int maxVisiblePages = 5; // Número máximo de páginas visibles
    int startPage = Math.Max(1, Model.CurrentPage - (maxVisiblePages / 2));
    int endPage = Math.Min(Model.TotalPages, startPage + maxVisiblePages - 1);

    // Ajustar startPage si estamos cerca del final
    if (endPage - startPage + 1 < maxVisiblePages)
    {
        startPage = Math.Max(1, endPage - maxVisiblePages + 1);
    }
}

<div class="main-container">
    <div class="page-header">
        <h1 style="color:white">@ViewData["Title"]</h1>
        <a class="btn-create" asp-action="Create">Agregar nueva tela</a>
    </div>

    <form asp-action="Index" method="get" class="mb-3">
        <div class="form-group d-flex">
            <input type="text" class="form-control me-2" id="searchString" name="searchString" placeholder="Ingrese nombre o color" value="@ViewBag.searchString">
            <button type="submit" class="btn btn-primary">Buscar</button>
        </div>
    </form>

    @if (!string.IsNullOrEmpty(ViewBag.SearchString))
    {
        <p>Resultados de búsqueda para: "@ViewBag.SearchString"</p>
    }

    @if (Model != null && Model.Telas != null && Model.Telas.Any()) // Asegúrate de usar llaves aquí
    {
        <div class="product-grid">
            @foreach (var tela in Model.Telas)
            {
                <div class="product-card">
                    <a href="@Url.Action("Details", new { id = tela.Id })" class="product-name">@tela.Nombre</a>
                    <div class="product-detail">
                        <span class="product-label">Color:</span> @tela.Color
                    </div>
                    <div class="product-detail">
                        <span class="product-label">Stock:</span> @tela.Stock
                    </div>
                    <div class="action-buttons">
                        @Html.ActionLink("Editar", "Edit", new { id = tela.Id }, new { @class = "btn-action btn-edit" })
                        @Html.ActionLink("Detalles", "Details", new { id = tela.Id }, new { @class = "btn-action btn-details" })
                        @Html.ActionLink("Eliminar", "Delete", new { id = tela.Id }, new { @class = "btn-action btn-delete" })
                    </div>
                </div>
            }
        </div>
        <div class="pagination">
            @if (Model.CurrentPage > 1)
            {
                <a class="btn btn-primary"
                   asp-action="Index"
                   asp-route-page="1"
                   asp-route-pageSize="@Model.PageSize">Primera</a>

                <a class="btn btn-primary"
                   asp-action="Index"
                   asp-route-page="@(Model.CurrentPage - 1)"
                   asp-route-pageSize="@Model.PageSize">Anterior</a>
            }

            @if (startPage > 1)
            {
                <span class="pagination-ellipsis">...</span>
            }

            @for (int i = startPage; i <= endPage; i++)
            {
                <a class="btn @(i == Model.CurrentPage ? "btn-success" : "btn-primary")"
                   asp-action="Index"
                   asp-route-page="@i"
                   asp-route-pageSize="@Model.PageSize">@i</a>
            }

            @if (endPage < Model.TotalPages)
            {
                <span class="pagination-ellipsis">...</span>
            }

            @if (Model.CurrentPage < Model.TotalPages)
            {
                <a class="btn btn-primary"
                   asp-action="Index"
                   asp-route-page="@(Model.CurrentPage + 1)"
                   asp-route-pageSize="@Model.PageSize">Siguiente</a>

                <a class="btn btn-primary"
                   asp-action="Index"
                   asp-route-page="@Model.TotalPages"
                   asp-route-pageSize="@Model.PageSize">Última</a>
            }

           
        </div>
    }
    else
    {
        <div class="alert alert-info" role="alert">
            No se encontraron Telas.
        </div>
    }
</div>
